//提高编译速度
tasks.whenTaskAdded { task ->
    if (task.name.contains("lint")) {
        task.enabled = false
    }
}
apply plugin: 'com.android.application'
//要是在库中使用必须添加butterknife
apply plugin: 'com.jakewharton.butterknife'

android {

    compileSdkVersion Integer.parseInt(COMPILE_SDK_VERSION)
    buildToolsVersion BUILDTOOLS_VERSION

    defaultConfig {
        //当方法数超过65535(方法的索引使用的是一个short值，
        //而short最大值是65535)的时候允许打包成多个dex文件，动态加载dex
        multiDexEnabled true
        applicationId "com.lifan.live"
        minSdkVersion Integer.parseInt(MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(TARGET_SDK_VERSION)
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME
        //https://blog.csdn.net/chen_xi_hao/article/details/80526049
        flavorDimensions "versionCode"

        ndk {
            // 设置支持的SO库架构
//            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        //butterknife配置
        compileOptions {
            //在这里你可以进行 Java 的版本配置，
            //以便使用对应版本的一些新特性
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        //用于ARouter跳转找到路径(每一个目标Module都需要加此配置)
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [moduleName: project.getName()]
            }
        }

        //替换androidmanifest文件中的标签
        manifestPlaceholders = [value_isDebug: isDebug.toBoolean()]

    }
    //用R.string存储些常量是非常方便的事情，但有时中英文同时存在时会存在些问题，例如生成APK时报错
    //告诉编译器，仅把translate引起的warning屏蔽掉，不要妨碍APK的生成
    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    //优化编译速度
    dexOptions {
        //最大堆内存
        javaMaxHeapSize "4g"
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = false
        //线程数
        threadCount = 8
    }

    signingConfigs {
        debug {
            keyAlias 'comiclifan'
            keyPassword 'comiclifan'
            storeFile file('../comiclifan.jks')
            storePassword 'comiclifan'
            v2SigningEnabled true
        }
        release {
            keyAlias 'comiclifan'
            keyPassword 'comiclifan'
            storeFile file('../comiclifan.jks')
            storePassword 'comiclifan'
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            //是否混淆
            minifyEnabled false
            //删除一些无用资源
            shrinkResources false
            //APK优化zip
            zipAlignEnabled true
            //是否可调式
            debuggable false
            //指定签名的release
            signingConfig signingConfigs.release
            //release的Proguard默认为Module下的proguard-rules.pro文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                def buildType = variant.buildType.name
                // 只有Release包可以变更路径（因为AS会自动安装Debug包，故Debug包路径不能改变）
                if (buildType == "release") {
                    variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk_release_lf/")
                }
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    // 同理，只有Release包可以变更名称
                    if (outputFile != null && outputFile.name.endsWith(".apk") && buildType == "release") {
                        def fileName = variant.productFlavors.get(0).getName() + ".apk"
                        // 将名字打印出来查看效果
                        output.outputFileName = fileName
                    }
                }
            }
        }

        debug {
            minifyEnabled false
            debuggable true
            manifestPlaceholders = [value_channel_id: "1",
                                    app_icon: "@mipmap/ic_launcher",
                                    app_icon_round: "@mipmap/ic_launcher_round",
                                    app_name:"无敌项目",
                                    value_isDebug   : true]
            signingConfig signingConfigs.release
        }
    }

    //设置渠道
    productFlavors {

        "APP_qihu360" {
            manifestPlaceholders = [value_channel_id: "1",
                                    app_icon: "@mipmap/ic_launcher",
                                    app_icon_round: "@mipmap/ic_launcher_round",
                                    app_name:"无敌项目",
                                    value_isDebug   : false]
        }

    }

    //制定整个项目的jar、aar目录均为sdk下的lib目录
    repositories {
        flatDir {
            dirs 'libs','../sdk/libs'
        }
    }
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    //libs文件夹下的jar包都将被引用
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //annotationProcessor这一行在每个组件里面都必须添加
    annotationProcessor "com.alibaba:arouter-compiler:${AROUTER_COMPLIER_VERSION}"
    //要是在库中使用必须添加butterknife
    annotationProcessor "com.jakewharton:butterknife-compiler:${BUTTERKNIFE_VERSION}"
    //引用base库
    implementation project(':base')
    //引用sdk库(包含各种第三方库)
    implementation project(':sdk')
    //引用comic库（漫画业务逻辑）
    implementation project(':comic')
}
